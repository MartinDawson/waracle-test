{"ast":null,"code":"import _defineProperty from \"/home/martin/Documents/waracle/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CAKE_ACTIONS } from '../actions/cakeActions';\nimport { Map } from 'immutable';\nvar initialState = {\n  cakes: Map()\n};\nexport var cakeReducer = function cakeReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CAKE_ACTIONS.ADD_CAKE:\n    case CAKE_ACTIONS.CAKE_UPDATED:\n    case CAKE_ACTIONS.CAKE_FETCHED:\n      {\n        var newCakes = state.cakes.set(action.cake.id, action.cake);\n        return _objectSpread({}, state, {\n          cakes: newCakes\n        });\n      }\n      ;\n\n    case CAKE_ACTIONS.SET_CAKES:\n      {\n        return _objectSpread({}, state, {\n          cakes: Map(action.cakes.map(function (cake) {\n            return [cake.id, cake];\n          }))\n        });\n      }\n      ;\n\n    case CAKE_ACTIONS.CAKE_DELETED:\n      {\n        var _newCakes = state.cakes.delete(action.id);\n\n        return _objectSpread({}, state, {\n          cakes: _newCakes\n        });\n      }\n      ;\n\n    default:\n      return state;\n  }\n};\nexport default cakeReducer;","map":{"version":3,"sources":["/home/martin/Documents/waracle/src/reducers/cakeReducer.tsx"],"names":["CAKE_ACTIONS","Map","initialState","cakes","cakeReducer","state","action","type","ADD_CAKE","CAKE_UPDATED","CAKE_FETCHED","newCakes","set","cake","id","SET_CAKES","map","CAKE_DELETED","delete"],"mappings":";;;;;;AACA,SAAuBA,YAAvB,QAA2C,wBAA3C;AAEA,SAASC,GAAT,QAAoB,WAApB;AAEA,IAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAEF,GAAG;AADqB,CAAjC;AAIA,OAAO,IAAMG,WAA8C,GAAG,SAAjDA,WAAiD,GAA8C;AAAA,MAA7CC,KAA6C,uEAArCH,YAAqC;AAAA,MAAvBI,MAAuB;;AAC1G,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,YAAY,CAACQ,QAAlB;AACA,SAAKR,YAAY,CAACS,YAAlB;AACA,SAAKT,YAAY,CAACU,YAAlB;AAAgC;AAC9B,YAAMC,QAAQ,GAAGN,KAAK,CAACF,KAAN,CAAYS,GAAZ,CAAgBN,MAAM,CAACO,IAAP,CAAYC,EAA5B,EAAgCR,MAAM,CAACO,IAAvC,CAAjB;AAEA,iCAAYR,KAAZ;AAAmBF,UAAAA,KAAK,EAAEQ;AAA1B;AACD;AAAA;;AACD,SAAKX,YAAY,CAACe,SAAlB;AAA6B;AAC3B,iCAAYV,KAAZ;AAAmBF,UAAAA,KAAK,EAAEF,GAAG,CAACK,MAAM,CAACH,KAAP,CAAaa,GAAb,CAAiB,UAAAH,IAAI;AAAA,mBAAI,CAACA,IAAI,CAACC,EAAN,EAAUD,IAAV,CAAJ;AAAA,WAArB,CAAD;AAA7B;AACD;AAAA;;AACD,SAAKb,YAAY,CAACiB,YAAlB;AAAgC;AAC9B,YAAMN,SAAQ,GAAGN,KAAK,CAACF,KAAN,CAAYe,MAAZ,CAAmBZ,MAAM,CAACQ,EAA1B,CAAjB;;AAEA,iCAAYT,KAAZ;AAAmBF,UAAAA,KAAK,EAAEQ;AAA1B;AACD;AAAA;;AACD;AACE,aAAON,KAAP;AAjBJ;AAmBD,CApBM;AAsBP,eAAeD,WAAf","sourcesContent":["import { ICakeState, ICake } from '../types';\r\nimport { ICakeActions, CAKE_ACTIONS } from '../actions/cakeActions';\r\nimport { Reducer } from 'redux';\r\nimport { Map } from 'immutable';\r\n\r\nconst initialState: ICakeState = {\r\n  cakes: Map<ICake['id'], ICake>()\r\n};\r\n\r\nexport const cakeReducer: Reducer<ICakeState, ICakeActions> = (state = initialState, action): ICakeState => {\r\n  switch (action.type) {\r\n    case CAKE_ACTIONS.ADD_CAKE:\r\n    case CAKE_ACTIONS.CAKE_UPDATED:\r\n    case CAKE_ACTIONS.CAKE_FETCHED: {\r\n      const newCakes = state.cakes.set(action.cake.id, action.cake);\r\n\r\n      return { ...state, cakes: newCakes };\r\n    };\r\n    case CAKE_ACTIONS.SET_CAKES: {\r\n      return { ...state, cakes: Map(action.cakes.map(cake => [cake.id, cake])) };\r\n    };\r\n    case CAKE_ACTIONS.CAKE_DELETED: {\r\n      const newCakes = state.cakes.delete(action.id);\r\n\r\n      return { ...state, cakes: newCakes };\r\n    };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default cakeReducer;"]},"metadata":{},"sourceType":"module"}